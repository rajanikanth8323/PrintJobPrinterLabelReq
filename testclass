@isTest
public class PrintJobPrinterLabelRqtTest {
@isTest
static void testGetLabelPrinterDetails_Success() {
    // Create supplier Account
    Account supplier = new Account(Name = 'PrintShopSupplier');
    insert supplier;

    // Create NiceLabel_Request__c parent record
    NiceLabel_Request__c request = new NiceLabel_Request__c();
    insert request;

    // Create NiceLabel_Request_Line__c
    NiceLabel_Request_Line__c line = new NiceLabel_Request_Line__c(
        NiceLabel_Request__c = request.Id,
        Model__c = 'ModelX'
    );
    insert line;

    // Step 1: Insert related record for Product_Unique_ID__c (example: Product2 or custom object)
    Product__c productRef = new Product__c(Name = 'Product123', Business_Vertical__c='Labels & Tickets' );
    insert productRef;

    // Step 2: Create and insert Price_Specification_Book__c
    Price_Specification_Book__c specBook = new Price_Specification_Book__c(
        Name = 'SpecBookTest'
    );
    insert specBook;

    // Step 3: Insert Price_Specification_Book_Product__c using productRef.Id
    Price_Specification_Book_Product__c product = new Price_Specification_Book_Product__c(
        Name = 'ModelX',
        Order_to_Company__c = 'CompanyABC',
        Print_Shop__c = 'FVG HangZhou', // Replace with an actual picklist value
        Price_Specification_Book__c = specBook.Id,
        Product_Unique_ID__c = productRef.Id //
    );
    insert product;

   

    // Call method and assert
    Test.startTest();
    List<LabelPrinter_Detail__c> results = PrintJobPrinterLabelRqt.getLabelPrinterDetails(request.Id);
    Test.stopTest();

    
}
    @isTest
    static void testGetLabelPrinterDetails_Exception() {
        Test.startTest();
        List<LabelPrinter_Detail__c> results = PrintJobPrinterLabelRqt.getLabelPrinterDetails('InvalidId');
        Test.stopTest();

        System.assertEquals(0, results.size(), 'Expected empty list on invalid input');
    }
     @isTest
static void testGetLabelPrinterAllDetails() {
    // Create test data
    Account supplier = new Account(
        Name = 'PrintShop1',
        PrintShop__c = 'Hong Kong - Mainetti (HK) Ltd'
    );
    insert supplier;
    
    
    PrintJob_Supplier__c printsupli=new PrintJob_Supplier__c(Name='wiser');
        insert printsupli;

    // Create LabelPrinter_Detail__c record
    LabelPrinter_Detail__c printer = new LabelPrinter_Detail__c(
        Name = 'Printer1',
        Order_to_Company__c = 'Sri Lanka - Mainettech Lanka Pvt Ltd',
        PrintJob_Supplier__c = printsupli.Id
    );
    insert printer;

    Test.startTest();
    List<String> results = PrintJobPrinterLabelRqt.getLabelPrinterAllDetails();
    Test.stopTest();

    // Verify results
    System.assertNotEquals(0, results.size(), 'Expected to retrieve printer names');
    System.assert(results.contains('Printer1'), 'Expected to find Printer1 in results');
    System.assert(results.contains('None'), 'Expected to find None in results');
}
   @isTest
static void testGetLineStatusOptions() {
    // Insert test NiceLabel_Request_Line__c records
    NiceLabel_Request__c parentRequest = new NiceLabel_Request__c();
    insert parentRequest;

    NiceLabel_Request_Line__c line1 = new NiceLabel_Request_Line__c(
        NiceLabel_Request__c = parentRequest.Id,
        NL_Line_Status__c = 'Open' // âœ… Use a real picklist value from your org
    );
    
    NiceLabel_Request_Line__c line2 = new NiceLabel_Request_Line__c(
        NiceLabel_Request__c = parentRequest.Id,
        NL_Line_Status__c = 'Pending'
    );

    insert new List<NiceLabel_Request_Line__c>{line1, line2};

    Test.startTest();
    List<String> results = PrintJobPrinterLabelRqt.getLineStatusOptions();
    Test.stopTest();

    System.debug('Results size: ' + results.size());
    System.debug('Results: ' + results);

    System.assertNotEquals(0, results.size(), 'Expected to retrieve line status options');
    System.assert(results.contains('None'), 'Expected to find None in results');
    System.assert(results.contains('Open'), 'Expected to find Open in results');
    System.assert(results.contains('Pending'), 'Expected to find Pending in results');
}
    
    
    @isTest
    static void testGetOpenOrder_AllBranches() {
        // Insert a NiceLabel_Request__c record
        NiceLabel_Request__c req = new NiceLabel_Request__c(
            Order_To_Company__c = 'TestCo',
            MG_Order_Number__c = 'MG123',
            Mainetti_SO_SC__c = 'SO456',
            Retailer_PO_Number__c = 'PO789'
        );
        insert req;

        // Insert NiceLabel_Request_Line__c record
        NiceLabel_Request_Line__c line = new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = req.Id,
            Model__c = 'Model123',
            NL_Line_Status__c = 'Open',
            Order_Quantity_Num__c = 100,
            Printer_Type__c = 'Sato printer',
            QC_Passed__c = true,
            Barcode__c = 'BAR123'
        );
        insert line;

        Test.startTest();
        
        // CASE 1: Both orderToCompany and orderModel are provided
        List<NiceLabel_Request_Line__c> result1 = PrintJobPrinterLabelRqt.getOpenOrder('TestCo', 'Model123', null, null, null);
        System.assertNotEquals(0, result1.size(), 'Expected results for both filters');

        // CASE 2: Any one of the other filters is provided
        List<NiceLabel_Request_Line__c> result2 = PrintJobPrinterLabelRqt.getOpenOrder(null, null, 'MG123', null, null);
        System.assertNotEquals(0, result2.size(), 'Expected results for MG_Order_Number');

        // CASE 3: None of the filters provided
        List<NiceLabel_Request_Line__c> result3 = PrintJobPrinterLabelRqt.getOpenOrder(null, null, null, null, null);
        System.assertNotEquals(0, result3.size(), 'Expected default results when no filters are provided');

        Test.stopTest();
    }
    
    @isTest
    static void testGetRecord_Success() {
        // Create test data directly in the test method
        Account supplier = new Account(
            Name = 'PrintShop1',
            PrintShop__c = 'Hong Kong - Mainetti (HK) Ltd'
        );
        insert supplier;

        NiceLabel_Request__c request = new NiceLabel_Request__c(
            
            MG_Order_Status__c = 'Open',
            Order_To_Company__c = 'CompanyABC',
            MG_Order_Number__c = 'ORD001',
            Retailer_PO_Number__c = 'PO001',
            Mainetti_SO_SC__c = 'SO001'
        );
        insert request;

        NiceLabel_Request_Line__c line = new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = request.Id,
            Model__c = 'ModelX',
            
            NL_Line_Status__c = 'Open',
            Sheet_No__c = '123',
            PDF_Batch_Id__c = 'BATCH001',
            Start_Num__c = '1',
       
            File_Name__c = 'TestFile.pdf',
            Printer_Name__c = 'Printer1',
            Size__c = 'M',
            Barcode__c = 'BAR001',
            MG_Line_Number__c = 'LN001',
            Product_Description__c = 'Test Product',
            Order_Quantity_Num__c = 100,
            Printer_Status__c = 'open',
            Printer_Type__c = 'Sato printer',
            Color__c = 'Red',
            Print_Quantity_Num__c = 100,
           
           
            Downloaded_Date__c = Date.today(),
            
            Batch_Id__c = 'BATCH001'
        );
        insert line;

        // Debug statements to verify test data
        System.debug('Created line ID: ' + line.Id);
        System.debug('Created line PDF_Batch_Id__c: ' + line.PDF_Batch_Id__c);

        Test.startTest();
        List<NiceLabel_Request_Line__c> results = PrintJobPrinterLabelRqt.getRecord(new List<String>{line.PDF_Batch_Id__c});
        Test.stopTest();

        // Debug statements
        System.debug('Results size: ' + results.size());
        System.debug('Results: ' + results);


     
    }
@isTest
static void testGetWireOpenOrderForCarelabel_Success() {
    Account supplier = new Account(
        Name = 'PrintShop1',
        PrintShop__c = 'Hong Kong - Mainetti (HK) Ltd'
    );
    insert supplier;

    
    // Create requests matching the supplier
    List<NiceLabel_Request__c> requests = new List<NiceLabel_Request__c>{
        new NiceLabel_Request__c(
            MG_Order_Status__c = 'Open',
            Order_To_Company__c = 'PrintShop1', // Match PrintShop__c
            MG_Order_Number__c = 'ORD001',
            Retailer_PO_Number__c = 'PO001',
            Mainetti_SO_SC__c = 'SO001',
            Expected_Completion_Date__c = Date.today(),
            Retailer_Code__c = 'RC001',
            MG_Order_Date__c = Date.today()
        ),
        new NiceLabel_Request__c(
            MG_Order_Status__c = 'Order Received',
            Order_To_Company__c = 'PrintShop1',
            MG_Order_Number__c = 'ORD002',
            Retailer_PO_Number__c = 'PO002',
            Mainetti_SO_SC__c = 'SO002',
            Expected_Completion_Date__c = Date.today(),
            Retailer_Code__c = 'RC002',
            MG_Order_Date__c = Date.today()
        ),
        new NiceLabel_Request__c(
            MG_Order_Status__c = 'Pending Download',
            Order_To_Company__c = 'PrintShop1',
            MG_Order_Number__c = 'ORD003',
            Retailer_PO_Number__c = 'PO003',
            Mainetti_SO_SC__c = 'SO003',
            Expected_Completion_Date__c = Date.today(),
            Retailer_Code__c = 'RC003',
            MG_Order_Date__c = Date.today()
        )
    };
    insert requests;

    // Create lines
    List<NiceLabel_Request_Line__c> lines = new List<NiceLabel_Request_Line__c>();
    for (NiceLabel_Request__c req : requests) {
        lines.add(new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = req.Id,
            Model__c = 'ModelX',
            NL_Line_Status__c = 'Open',
            Sheet_No__c = '123',
            Barcode__c = 'BAR001',
            Printer_Type__c = 'Sato printer',
            QC_Passed__c = true,
            Printer_Status__c = 'open',
            Print_Quantity_Num__c = 100,
            Size__c = 'M',
            MG_Line_Number__c = 'LN001'
        ));
    }
    insert lines;

    Test.startTest();
    List<NiceLabel_Request__c> results = PrintJobPrinterLabelRqt.getWireOpenOrderForCarelabel();
    Test.stopTest();

    System.debug('Results: ' + results);
    System.assertEquals(3, results.size(), 'Should return all 3 records');
}
@isTest
 static void testSerialNumbCombined() {
        String print1 = 'ABC12345';
        Integer fieldlen = 5; // Extracts "ABC12"
        Integer len = 10;

        // Call the method using the correct class name
        String result = PrintJobPrinterLabelRqt.serialNumbCombined(print1, fieldlen, len);

        // Validate the result
        System.assertEquals('00000ABC12', result, 'Result should be left-padded to length 10');
    }
  @isTest
static void testFetchItemStatusUpdate_withNonOpenStatus() {
    // Step 1: Create a parent NiceLabel_Request__c
    NiceLabel_Request__c parent = new NiceLabel_Request__c();
    insert parent;

    // Step 2: Create a NiceLabel_Request_Line__c record with status NOT 'Open'
    NiceLabel_Request_Line__c line = new NiceLabel_Request_Line__c(
       
        NL_Line_Status__c = 'Pending', // MUST be something other than 'Open'
        NiceLabel_Request__c = parent.Id
    );
    insert line;

    // Step 3: Call the method
    Test.startTest();
    PrintJobPrinterLabelRqt.fetchItemStatusUpdate(new List<String>{line.Id});
    Test.stopTest();

    // Step 4: Assert the update happened
    NiceLabel_Request_Line__c updatedLine = [
        SELECT Id, NL_Line_Status__c, Downloaded_Date__c
        FROM NiceLabel_Request_Line__c
        WHERE Id = :line.Id
    ];

    System.assertEquals('Received', updatedLine.NL_Line_Status__c, 'Status should be updated to Received');
    System.assertNotEquals(null, updatedLine.Downloaded_Date__c, 'Downloaded_Date__c should be set');
}

@isTest
static void testParentUpdate_AllScenarios() {
    // 1. Scenario 1: Pending Download
    NiceLabel_Request__c parentPending = new NiceLabel_Request__c();
    insert parentPending;

    NiceLabel_Request_Line__c linePending = new NiceLabel_Request_Line__c(
       
        NL_Line_Status__c = 'Pending',
        NiceLabel_Request__c = parentPending.Id
    );
    insert linePending;

    // 2. Scenario 2: Open or QC Reprint â†’ 'Open'
    NiceLabel_Request__c parentOpen = new NiceLabel_Request__c();
    insert parentOpen;

    NiceLabel_Request_Line__c lineOpen = new NiceLabel_Request_Line__c(
      
        NL_Line_Status__c = 'Open',
        NiceLabel_Request__c = parentOpen.Id
    );
    insert lineOpen;

    // 3. Scenario 3: Under Manufacturing
    NiceLabel_Request__c parentManufacturing = new NiceLabel_Request__c();
    insert parentManufacturing;

    NiceLabel_Request_Line__c lineUM = new NiceLabel_Request_Line__c(
        NL_Line_Status__c = 'Received',
        NiceLabel_Request__c = parentManufacturing.Id
    );
    insert lineUM;

    // Query parent list with child relationships
    List<NiceLabel_Request__c> parentList = [
        SELECT Id, (SELECT Id, NL_Line_Status__c FROM NiceLabel_Request_Lines__r)
        FROM NiceLabel_Request__c
        WHERE Id IN :new List<Id>{parentPending.Id, parentOpen.Id, parentManufacturing.Id}
    ];

    // Call method
    Test.startTest();
    PrintJobPrinterLabelRqt.parentUpdate(parentList);
    Test.stopTest();

    // Assert each parent got the right status
    Map<Id, NiceLabel_Request__c> resultMap = new Map<Id, NiceLabel_Request__c>(
        [SELECT Id, MG_Order_Status__c FROM NiceLabel_Request__c WHERE Id IN :parentList]
    );

    System.assertEquals('Pending Download', resultMap.get(parentPending.Id).MG_Order_Status__c);
    System.assertEquals('Open', resultMap.get(parentOpen.Id).MG_Order_Status__c);
    System.assertEquals('Under Manufacturing', resultMap.get(parentManufacturing.Id).MG_Order_Status__c);
}
    @isTest
    static void testGetLineList_CoversAllAccess() {
        // Step 1: Create a test NiceLabel_Request__c record
        NiceLabel_Request__c req = new NiceLabel_Request__c(
           
            Retailer_PO_Number__c = 'PO123',
            Mainetti_SO_SC__c = 'SO456',
            MG_Order_Number__c = 'MG789',
            Order_To_Company__c = 'Test Company'
        );
        insert req;

        // Step 2: Create a test NiceLabel_Request_Line__c record
        NiceLabel_Request_Line__c line = new NiceLabel_Request_Line__c(
           
            NiceLabel_Request__c = req.Id,
            model__c = 'Model1',
            Order_Quantity_Num__c = 100,
            NL_Line_Status__c = 'Open',
            Barcode__c = '123456789',
            Printer_Type__c = 'Sato printer',
            QC_Passed__c = true,
            Batch_Id__c = 'BATCH001',
            Batch_Processing__c = true
        );
        insert line;

        // Step 3: Call the method with the inserted request ID
        Test.startTest();
        List<NiceLabel_Request_Line__c> result = PrintJobPrinterLabelRqt.getLineList(req.Id);
        Test.stopTest();

        // Step 4: Assert the results
        System.assertNotEquals(null, result, 'Result should not be null');
        System.assertEquals(1, result.size(), 'Should return 1 line record');
        System.assertEquals('Open', result[0].NL_Line_Status__c, 'Status should be Open');
    }

    @isTest
    static void testGetLineList_StatusFilteredOut() {
        // Create a NiceLabel_Request__c
        NiceLabel_Request__c req = new NiceLabel_Request__c(
           
            Retailer_PO_Number__c = 'PO999',
            Mainetti_SO_SC__c = 'SO999',
            MG_Order_Number__c = 'MG999',
            Order_To_Company__c = 'Filtered Company'
        );
        insert req;

        // Insert lines that should be filtered out
        NiceLabel_Request_Line__c line1 = new NiceLabel_Request_Line__c(
           
            NiceLabel_Request__c = req.Id,
            NL_Line_Status__c = 'Received'
        );
        NiceLabel_Request_Line__c line2 = new NiceLabel_Request_Line__c(
                       NiceLabel_Request__c = req.Id,
            NL_Line_Status__c = 'Order Completed'
        );
        insert new List<NiceLabel_Request_Line__c>{ line1, line2 };
Test.startTest();

List<NiceLabel_Request_Line__c> lines = PrintJobPrinterLabelRqt.getLineList(req.Id);
NiceLabel_Request_Line__c firstLine;

if (lines != null && !lines.isEmpty()) {
    firstLine = lines[0];
    // Proceed with firstLine safely
    System.debug('First Line ID: ' + firstLine.Id);
} else {
    System.debug('No lines returned for request: ' + req.Id);
    // Handle the case when there are no lines
}

Test.stopTest();

if (lines != null && !lines.isEmpty()) {
    firstLine = lines[0];
    // Proceed with logic
} else {
    // Handle empty list safely
    System.debug('No records found');
}


        

         
    }
    @isTest
    static void testMuhlBauerPrinterLineItemsUpdate_Success() {
        // Step 1: Create parent NiceLabel_Request__c record
        NiceLabel_Request__c req = new NiceLabel_Request__c(
            
        );
        insert req;

        // Step 2: Create related NiceLabel_Request_Line__c record
        NiceLabel_Request_Line__c reqLine = new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = req.Id,
            NL_Line_Status__c = 'Pending',
            Batch_Id__c = null,
            Printer_Name__c = null,
            Batch_Processing__c = true,
            PDF_Batch_Id__c = null,
            File_Name__c = null
        );
        insert reqLine;

        // Step 3: Call the method with test values
        String batchId = 'BATCH123';
        String printerName = 'Zebra-01';
        List<String> selectedLineIds = new List<String>{reqLine.Id};

        Test.startTest();
        String result = PrintJobPrinterLabelRqt.muhlbauerPrinterLineItemsUpdate(selectedLineIds, batchId, printerName);
        Test.stopTest();

        // Step 4: Retrieve updated record
        NiceLabel_Request_Line__c updatedLine = [
            SELECT Id, Printer_Name__c, NL_Line_Status__c, Batch_Processing__c, Batch_Id__c, PDF_Batch_Id__c, File_Name__c 
            FROM NiceLabel_Request_Line__c 
            WHERE Id = :reqLine.Id
        ];

        // Step 5: Assertions
        System.assertEquals('Success', result, 'Expected success message');
        System.assertEquals(printerName, updatedLine.Printer_Name__c, 'Printer name should match');
        System.assertEquals('Pending', updatedLine.NL_Line_Status__c, 'Status should be Pending');
        System.assertEquals(false, updatedLine.Batch_Processing__c, 'Batch processing should be false');
        System.assertEquals(batchId, updatedLine.Batch_Id__c, 'Batch Id should match');
        System.assertEquals(batchId, updatedLine.PDF_Batch_Id__c, 'PDF Batch Id should match');
        System.assertEquals(printerName + '_' + batchId + '_New'.replaceAll(' ', '_'), updatedLine.File_Name__c, 'File name format should match');
    }

    @isTest
    static void testMuhlBauerPrinterLineItemsUpdate_EmptyList() {
        // Test with empty list to ensure no errors and still returns "Success"
        Test.startTest();
        String result = PrintJobPrinterLabelRqt.muhlbauerPrinterLineItemsUpdate(new List<String>(), 'AnyBatch', 'AnyPrinter');
        Test.stopTest();

        System.assertEquals('Success', result, 'Should return success even if list is empty');
    }
     
    
   @IsTest
    static void testGetLabelPrinterReqLinesListAndAzureFolderCheck() {
        // Create parent request
        NiceLabel_Request__c parentReq = new NiceLabel_Request__c(
            Retailer_PO_Number__c = 'PO12345'
        );
        insert parentReq;

        // Create Parent_Line__c record
        NiceLabel_Request_Line__c parentLine = new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = parentReq.Id,
            NL_Line_Status__c = 'Open',
            Order_Quantity_Num__c = 10,
            Print_Quantity_Num__c = 5,
            Failed_Quantities__c = 0
        );
        insert parentLine;

        // Create child lines
        List<NiceLabel_Request_Line__c> lines = new List<NiceLabel_Request_Line__c>{
            new NiceLabel_Request_Line__c(
                NiceLabel_Request__c = parentReq.Id,
                NL_Line_Status__c = 'Open',
                Parent_Line__c = parentLine.Id,
                Model__c = 'Model1'
            ),
            new NiceLabel_Request_Line__c(
                NiceLabel_Request__c = parentReq.Id,
                NL_Line_Status__c = 'QC Reprint',
                Parent_Line__c = parentLine.Id,
                Model__c = 'Model2'
            ),
            new NiceLabel_Request_Line__c(
                NiceLabel_Request__c = parentReq.Id,
                NL_Line_Status__c = 'Pending',
                Parent_Line__c = parentLine.Id,
                Model__c = 'Model3'
            )
        };
        insert lines;

        // Create LabelPrinter_Detail__c with Folder_Created__c = false
        LabelPrinter_Detail__c printer1 = new LabelPrinter_Detail__c(
            Name = 'TestPrinter',
            Folder_Created__c =false,
            Single_Quote_Conversion__c = true
        );
        insert printer1;

        LabelPrinter_Detail__c printer2 = new LabelPrinter_Detail__c(
            Name = 'TestPrinter2',
            Folder_Created__c =true,
            Single_Quote_Conversion__c = false
        );
        insert printer2;

        // Create a system admin user
        Profile adminProfile = [SELECT Id FROM Profile WHERE Name = 'System Administrator' LIMIT 1];
        User testUser = new User(
            Alias = 'tuser',
            Email = 'testuser' + DateTime.now().getTime() + '@example.com',
            EmailEncodingKey = 'UTF-8',
            LastName = 'User',
            LanguageLocaleKey = 'en_US',
            LocaleSidKey = 'en_US',
            ProfileId = adminProfile.Id,
            TimeZoneSidKey = 'America/Los_Angeles',
            UserName = 'testuser' + DateTime.now().getTime() + '@example.com'
        );
        insert testUser;

        Test.startTest();

        // Call getLabelPrinterReqLinesList
        List<NiceLabel_Request_Line__c> updatedLines = PrintJobPrinterLabelRqt.getLabelPrinterReqLinesList(
            new List<String>{lines[0].Id, lines[1].Id, lines[2].Id}, 'BATCH001'
        );

        Boolean folderCreated1;
        Boolean folderCreated2;

        System.runAs(testUser) {
            // Hereâ€™s the key: use a folder name that your real createFolderRequest method will "accept"
            // For example, if it checks for certain conditions, use that condition
            // Or use the same folder name every time
            folderCreated1 = PrintJobPrinterLabelRqt.azureFolderCheck('TestPrinter', 'AnyFolder'); // this should trigger Folder_Created__c = true
            folderCreated2 = PrintJobPrinterLabelRqt.azureFolderCheck('TestPrinter2', 'AnyFolder2');
        }

        Test.stopTest();

        // Assertions
        for (NiceLabel_Request_Line__c line : updatedLines) {
            System.assertEquals('BATCH001', line.PDF_Batch_Id__c);
            System.assertEquals(true, line.Batch_Processing__c);
        }

        LabelPrinter_Detail__c refreshedPrinter1 = [SELECT Folder_Created__c FROM LabelPrinter_Detail__c WHERE Id = :printer1.Id];
        System.assertEquals(true, folderCreated1);
        System.assertEquals(true, folderCreated2);
       
    } 
    
    @isTest
    static void testGenerateBatchId() {
        Test.startTest();
        String batchId =PrintJobPrinterLabelRqt.generateBatchId();
        Test.stopTest();

        System.assertNotEquals(null, batchId, 'Batch ID should not be null');
        System.assert(batchId.length() > 0, 'Batch ID should not be empty');

        // Optional: check format - it should be only digits (YYYYMMDDHHMMSS...)
       
    }
    @isTest
    static void testGetLabelPrinterReqLineList() {
        // Create parent records
        NiceLabel_Request__c req1 = new NiceLabel_Request__c();
        insert req1;

        // Create line items related to req1 with NL_Line_Status__c = 'Open' (should be returned)
        NiceLabel_Request_Line__c line1 = new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = req1.Id,
            NL_Line_Status__c = 'Open',
            Model__c = 'ModelA'
            // Add any required fields here
        );

        // Create line item with NL_Line_Status__c = 'QC Reprint' (should be returned)
        NiceLabel_Request_Line__c line2 = new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = req1.Id,
            NL_Line_Status__c = 'QC Reprint',
            Model__c = 'ModelB'
            // Add any required fields here
        );

        // Create line item with NL_Line_Status__c = 'Closed' (should NOT be returned)
        NiceLabel_Request_Line__c line3 = new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = req1.Id,
            NL_Line_Status__c = 'Open',
            Model__c = 'ModelC'
            // Add any required fields here
        );

        insert new List<NiceLabel_Request_Line__c>{ line1, line2, line3 };

        // Call method under test
        Set<Id> requestIds = new Set<Id>{req1.Id};
        Test.startTest();
        List<NiceLabel_Request_Line__c> results = PrintJobPrinterLabelRqt.getLabelPrinterReqLineList(requestIds);
        Test.stopTest();

        // Assertions

        // Only line1 and line2 should be returned
       

        Set<String> expectedStatuses = new Set<String>{'Open', 'QC Reprint'};
        for (NiceLabel_Request_Line__c line : results) {
            System.assert(expectedStatuses.contains(line.NL_Line_Status__c), 'Returned line status should be Open or QC Reprint');
        }
    }
    
    @isTest
    static void testGetBatchId() {
        NiceLabel_Request__c nic =new NiceLabel_Request__c();
        insert nic;
        // Prepare test data
        NiceLabel_Request_Line__c line1 = new NiceLabel_Request_Line__c(
            PDF_Batch_Id__c = 'Batch123',
            Batch_Id__c = 'Batch001',
            NiceLabel_Request__c=nic.Id
            
            // Add required fields if any
        );
        NiceLabel_Request_Line__c line2 = new NiceLabel_Request_Line__c(
            PDF_Batch_Id__c = 'Batch456',
            Batch_Id__c = 'Batch002',
             NiceLabel_Request__c=nic.Id
        );
        NiceLabel_Request_Line__c line3 = new NiceLabel_Request_Line__c(
            PDF_Batch_Id__c = 'Batch789',  // Duplicate PDF_Batch_Id__c to test uniqueness
            Batch_Id__c = 'Batch003',
             NiceLabel_Request__c=nic.Id
        );

        insert new List<NiceLabel_Request_Line__c>{line1, line2, line3};

        List<Id> selectedLineIds = new List<Id>{line1.Id, line2.Id, line3.Id};

        Test.startTest();
        List<String> batchIds = PrintJobPrinterLabelRqt.getBatchId(selectedLineIds);
        Test.stopTest();

        // Assert batchIds contains only unique PDF_Batch_Id__c values
       
       
    }
    @isTest
    static void testHandleParentDataSimple() {
        // Step 1: Create parent record
        NiceLabel_Request__c request = new NiceLabel_Request__c();
        insert request;

        // Step 2: Create related line items matching the filter (NL_Line_Status__c and Batch_Processing__c)
        List<NiceLabel_Request_Line__c> lines = new List<NiceLabel_Request_Line__c>{
            new NiceLabel_Request_Line__c(
                NiceLabel_Request__c = request.Id,
                NL_Line_Status__c = 'Open',
                Batch_Processing__c = false
            ),
            new NiceLabel_Request_Line__c(
                NiceLabel_Request__c = request.Id,
                NL_Line_Status__c = 'QC Reprint',
                Batch_Processing__c = false
            )
        };
        insert lines;

        Test.startTest();
        // Step 3: Call your method
        Map<String, List<String>> resultMap = PrintJobPrinterLabelRqt.handleParentData(request.Id);
        Test.stopTest();

        // Step 4: Assertions
        System.assertNotEquals(null, resultMap, 'Result map should not be null');
        System.assert(resultMap.containsKey(request.Id), 'Result map should contain the parent request Id');
        System.assertEquals(lines.size(), resultMap.get(request.Id).size(), 'Returned list size should match inserted lines');
    }
   
    @isTest
    static void testGetLineItems() {
        // Step 1: Create parent record
        NiceLabel_Request__c request = new NiceLabel_Request__c();
        insert request;

        // Step 2: Create child records with some fields
        NiceLabel_Request_Line__c line1 = new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = request.Id,
            NL_Line_Status__c = 'Open',
            Batch_Id__c = 'Batch7645',
            Printer_Name__c = 'PrinterA'
        );
        insert line1;

        // Step 3: Prepare input list of Ids
        List<String> lineIds = new List<String>{ line1.Id };

        Test.startTest();
        // Step 4: Call the method
        List<NiceLabel_Request_Line__c> resultList = PrintJobPrinterLabelRqt.getlineitems(lineIds);
        Test.stopTest();

        // Step 5: Verify result is returned correctly
        System.assertNotEquals(null, resultList, 'Result list should not be null');
        System.assertEquals(1, resultList.size(), 'Result list size should be 1');
        System.assertEquals(line1.Id, resultList[0].Id, 'Returned line Id should match inserted line');
    }

    @testSetup
    static void setupData() {
        // Create required parent records
        // Create NiceLabel_Request__c
        NiceLabel_Request__c req = new NiceLabel_Request__c();
        insert req;

        // Create LabelPrinter_Detail__c
        LabelPrinter_Detail__c printer = new LabelPrinter_Detail__c(Name='TestPrinter', Folder_Created__c=true);
        insert printer;

        // Create Variable_Data_Mapping__c (required for downloadMuhlbauerPrinterCSVandPDF)
        Variable_Data_Mapping__c mapping = new Variable_Data_Mapping__c(
            
            LabelPrinter_Detail__c = printer.Id,
            Retailer_Codes__c = null, // Set if required
            File_Column_A__c = 'StyleNumber', PO_Field_A__c = 'Style_No__c',
           
            Parent_Object__c = 'NiceLabel_Request_Line__c',
            CSV_Delimiter__c = 'comma'
                       

            
        );
        insert mapping;

        // Create NiceLabel_Request_Line__c with NL_Line_Status__c = 'Pending'
        NiceLabel_Request_Line__c line = new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = req.Id,
            NL_Line_Status__c = 'Pending',
            Batch_Id__c = 'BATCH982',
            File_Name__c = 'File1.csv',
            Printer_Name__c = 'TestPrinter'
            
        );
        insert line;
    }

   @isTest
    static void testRFIDNumGeneartion() {
        
      // Step 1: Create a mock Sales_Order__c record (if required)
Sales_Order__c order = new Sales_Order__c(
    
);
insert order;

// Step 2: Now create the line item using the order's Id
Sales_Order_Line_Items__c soli = new Sales_Order_Line_Items__c(
    Sales_Order__c = order.Id
   
);
insert soli;


        // Prepare parameters
        List<Sales_Order_Line_Items__c> soliList = new List<Sales_Order_Line_Items__c>{ soli };
        Boolean isRevised = true;
        Map<Sales_Order_Line_Items__c, Boolean> reviseMap = new Map<Sales_Order_Line_Items__c, Boolean>{
            soli => true
        };
        String retailCode = 'RC001';

        // Call the method from the correct class
        Test.startTest();
        PrintJobPrinterLabelRqt.RFIDNumGeneartion(soliList, isRevised, reviseMap, retailCode);
        Test.stopTest();  
}
@isTest
static void testParentUpdateForMuhlbauerPrinter_AllScenarios() {
    // 1. Scenario: Status should be "Pending Download"
    NiceLabel_Request__c parent1 = new NiceLabel_Request__c();
    insert parent1;
    insert new NiceLabel_Request_Line__c(
        NiceLabel_Request__c = parent1.Id,
        NL_Line_Status__c = 'Pending'
    );

    // 2. Scenario: Status should be "Open" (openValue=true, underManufacturing=false)
    NiceLabel_Request__c parent2 = new NiceLabel_Request__c();
    insert parent2;
    insert new NiceLabel_Request_Line__c(
        NiceLabel_Request__c = parent2.Id,
        NL_Line_Status__c = 'Open'
    );

    // 3. Scenario: Status should be "Open" (openValue=true, underManufacturing=true)
    NiceLabel_Request__c parent3 = new NiceLabel_Request__c();
    insert parent3;
    insert new NiceLabel_Request_Line__c(
        NiceLabel_Request__c = parent3.Id,
        NL_Line_Status__c = 'Open'
    );
    insert new NiceLabel_Request_Line__c(
        NiceLabel_Request__c = parent3.Id,
        NL_Line_Status__c = 'open' // triggers underManufacturing = true
    );

    // 4. Scenario: Status should be "Under Manufacturing" (openValue=false, underManufacturing=true)
    NiceLabel_Request__c parent4 = new NiceLabel_Request__c();
    insert parent4;
    insert new NiceLabel_Request_Line__c(
        NiceLabel_Request__c = parent4.Id,
        NL_Line_Status__c = 'open' // not Open, QC Reprint, or Pending
    );

    // Query parents with child relationships
    List<NiceLabel_Request__c> parentList = [
        SELECT Id, Name,
            (SELECT Id, NL_Line_Status__c FROM NiceLabel_Request_Lines__r)
        FROM NiceLabel_Request__c
        WHERE Id IN :new List<Id>{ parent1.Id, parent2.Id, parent3.Id, parent4.Id }
    ];

    // Run the method
    Test.startTest();
    PrintJobPrinterLabelRqt.parentUpdateForMuelbuerPrinter(parentList);
    Test.stopTest();

    // Validate each update
    List<NiceLabel_Request__c> updatedParents = [
        SELECT Name, MG_Order_Status__c FROM NiceLabel_Request__c
        WHERE Id IN :new List<Id>{ parent1.Id, parent2.Id, parent3.Id, parent4.Id }
    ];

    for (NiceLabel_Request__c rec : updatedParents) {
        System.debug(rec.Name + ' => ' + rec.MG_Order_Status__c);
        System.assertNotEquals(null, rec.MG_Order_Status__c);
    }
}
    @isTest
    static void setupTestData() {
        // Create LabelPrinter_Detail__c
        LabelPrinter_Detail__c printer = new LabelPrinter_Detail__c(
            Name = 'Test Printer',
            Folder_Created__c = false,
            Single_Quote_Conversion__c = true
        );
        insert printer;

        // Create NiceLabel_Request__c
        NiceLabel_Request__c request = new NiceLabel_Request__c(
           
            MG_Order_Status__c = 'Open'
        );
        insert request;

        // Create NiceLabel_Request_Line__c
        NiceLabel_Request_Line__c line = new NiceLabel_Request_Line__c(
            
            NL_Line_Status__c = 'Open',
            Printer_Name__c = printer.Name,
            NiceLabel_Request__c = request.Id,
            Batch_Processing__c = false,
            CSV_Demiliter__c = 'Semicolon'
           
        );
        insert line;
    }

@isTest
static void testMuhlBauerPrinterDownloadCSVANDPDFBulk() {
    
Variable_Data_Mapping__c record = new Variable_Data_Mapping__c();
 record.File_Column_A__c = 'Size'; 
     record.PO_Field_A__c = 'Size__c';
   record.File_Column_A_Destination_Indicator__c='POL';

    
    
record.Include_First_Line__c = true;
record.Parent_Object__c = 'NiceLabel_Request_Line__c';
record.Delimiter__c = '';
record.CSV_Delimiter__c = 'Semicolon';
    
    
    
    
    
    record.File_Column_B__c = 'FileName';
record.PO_Field_B__c = 'File_Name__c';
record.File_Column_B_Destination_Indicator__c = 'POL';

record.File_Column_C__c = 'AzureFileUploadedLine';
record.PO_Field_C__c = 'Azure_File_Uploaded_Line__c';
record.File_Column_C_Destination_Indicator__c = 'POL';

record.File_Column_D__c = 'Barcode';
record.PO_Field_D__c = 'Barcode__c';
record.File_Column_D_Destination_Indicator__c = 'POL';

record.File_Column_E__c = 'BarcodePrintShop';
record.PO_Field_E__c = 'Barcode_PrintShop_Non_Formula__c';
record.File_Column_E_Destination_Indicator__c = 'POL';

record.File_Column_F__c = 'BarcodePrintshop';
record.PO_Field_F__c = 'Barcode_Printshop__c';
record.File_Column_F_Destination_indicator__c = 'POL';

record.File_Column_G__c = 'BatchId';
record.PO_Field_G__c = 'Batch_Id__c';
record.File_Column_G_Destination_Indicator__c = 'POL';

record.File_Column_H__c = 'BatchProcessing';
record.PO_Field_H__c = 'Batch_Processing__c';
record.File_Column_H_Destination_Indicator__c = 'PO';

record.File_Column_I__c = 'Brand';
record.PO_Field_I__c = 'Brand__c';
record.File_Column_I_Destination_Indicator__c = 'PO';

record.File_Column_J__c = 'CARELABELURLCARE';
record.PO_Field_J__c = 'CARELABEL_URL_CARE__c';
record.File_Column_J_Destination_Indicator__c = 'POL';

record.File_Column_K__c = 'CC';
record.PO_Field_K__c = 'CC__c';
record.File_Column_K_Destination_Indicator__c = 'POL';

record.File_Column_L__c = 'CheckDigit';
record.PO_Field_L__c = 'Check_Digit__c';
record.File_Column_L_Destination_Indicator__c = 'PO';

record.File_Column_M__c = 'Class';
record.PO_Field_M__c = 'Class__c';
record.File_Column_M_Destination_Indicator__c = 'POL';

record.File_Column_N__c = 'CodeCC';
record.PO_Field_N__c = 'Code_CC__c';
record.File_Column_N_Destination_Indicator__c = 'POL';

record.File_Column_O__c = 'Color';
record.PO_Field_O__c = 'Color__c';
record.File_Column_O_Destination_Indicator__c = 'POL';

record.File_Column_P__c = 'Comment';
record.PO_Field_P__c = 'Comment__c';
record.File_Column_P_Destination_Indicator__c = 'POL';
   

    record.File_Column_Q__c = 'Companyprefix';
record.PO_Field_Q__c = 'Company_prefix__c';
record.File_Column_Q_Destination_Indicator__c = 'POL';

record.File_Column_R__c = 'ConvertedEPC';
record.PO_Field_R__c = 'Converted_EPC__c';
record.File_Column_R_Destination_Indicator__c = 'POL';

record.File_Column_S__c = 'Country';
record.PO_Field_S__c = 'Country__c';
record.File_Column_S_Destination_Indicator__c = 'POL';

record.File_Column_T__c = 'CreatedChilde';
record.PO_Field_T__c = 'CreatedChilde__c';
record.File_Column_T_Destination_Indicator__c = 'POL';

record.File_Column_U__c = 'CSV_Demiliter';
record.PO_Field_U__c = 'CSV_Demiliter__c';
record.File_Column_U_Destination_Indicator__c = 'POL';

record.File_Column_V__c = 'CSVLink';
record.PO_Field_V__c = 'CSV_Link__c';
record.File_Column_V_Destination_Indicator__c = 'POL';

record.File_Column_W__c = 'CSVPDF';
record.PO_Field_W__c = 'CSV_PDF__c';
record.File_Column_W_Destination_Indicator__c = 'POL';

record.File_Column_X__c = 'Department';
record.PO_Field_X__c = 'Department__c';
record.File_Column_X_Destination_Indicator__c = 'POL';

record.File_Column_Y__c = 'DownloadedDate';
record.PO_Field_Y__c = 'Downloaded_Date__c';
record.File_Column_Y_Destination_Indicator__c = 'POL';

record.File_Column_Z__c = 'ExpectedCompletionDate	';
record.PO_Field_Z__c = 'Expected_Completion_Date__c	';
record.File_Column_Z_Destination_Indicator__c = 'POL';

record.File_Column_AA__c = 'FailedQuantities ';
record.PO_Field_AA__c = 'Failed_Quantities__c';
record.File_Column_AA_Destination_Indicator__c = 'pol';

record.File_Column_AB__c = 'Filter ';
record.PO_Field_AB__c = 'Filter__c';
record.File_Column_AB_Destination_Indicator__c = 'pol';

record.File_Column_AC__c = 'Fineline';
record.PO_Field_AC__c = 'Fineline__c';
record.File_Column_AC_Destination_Indicator__c = 'POL';

record.File_Column_AD__c = 'Header';
record.PO_Field_AD__c = 'Header__c';
record.File_Column_AD_Destination_Indicator__c = 'POL';

record.File_Column_AE__c = 'Item';
record.PO_Field_AE__c = 'Item__c';
record.File_Column_AE_Destination_Indicator__c = 'POL';

record.File_Column_AF__c = 'ItemDescMGLI';
record.PO_Field_AF__c = 'Item_Desc_MGLI__c';
record.File_Column_AF_Destination_Indicator__c = 'POL';

record.File_Column_AG__c = 'Itemdescription';
record.PO_Field_AG__c = 'Item_description__c';
record.File_Column_AG_Destination_Indicator__c = 'POL';

record.File_Column_AH__c = 'ItemID';
record.PO_Field_AH__c = 'Item_ID__c';
record.File_Column_AH_Destination_Indicator__c = 'POL';

record.File_Column_AI__c = 'Itemreference';
record.PO_Field_AI__c = 'Item_reference__c';
record.File_Column_AI_Destination_Indicator__c = 'POL';

record.File_Column_AJ__c = 'LabelLayoutCode';
record.PO_Field_AJ__c = 'Label_Layout_Code__c';
record.File_Column_AJ_Destination_Indicator__c = 'POL';

record.File_Column_AK__c = 'LabelLayoutCodeNF';
record.PO_Field_AK__c = 'Label_Layout_Code_NF__c';
record.File_Column_AK_Destination_Indicator__c = 'POL';

record.File_Column_AL__c = 'MGLineNumber';
record.PO_Field_AL__c = 'MG_Line_Number__c';
record.File_Column_AL_Destination_Indicator__c = 'POL';

record.File_Column_AM__c = 'MGLineStatus';
record.PO_Field_AM__c = 'MG_Line_Status__c';
record.File_Column_AM_Destination_Indicator__c = 'POL';

record.File_Column_AN__c = 'MGNONF';
record.PO_Field_AN__c = 'MG_NO_NF__c';
record.File_Column_AN_Destination_Indicator__c = 'POL';
    
 record.PO_Field_AO__c= 'Template_ID__c';
 record.File_Column_AO__c='Template_ID' ;
 record.File_Column_AO_Destination_Indicator__c='POL';
   
  

insert record;

    
    // Setup test data: parent record
    NiceLabel_Request__c nicel = new NiceLabel_Request__c();
    insert nicel;
     List<NiceLabel_Request_Line__c> testLines = new List<NiceLabel_Request_Line__c>();
        for (Integer i = 0; i < 3; i++) {
            testLines.add(new NiceLabel_Request_Line__c(
                
                NL_Line_Status__c = 'Pending',
                Batch_Id__c = 'Batch' + i,
                File_Name__c = 'File' + i + '.csv',
                NiceLabel_Request__c=nicel.Id,
                CSV_Demiliter__c = 'Comma'
            ));
        }
        insert testLines;

    

    // Create multiple NiceLabel_Request_Line__c records
    List<NiceLabel_Request_Line__c> lines = new List<NiceLabel_Request_Line__c>{
        new NiceLabel_Request_Line__c(
            NL_Line_Status__c = 'Pending',
            Batch_Id__c = 'Batch193',
            File_Name__c = 'FileA',
            NiceLabel_Request__c = nicel.Id,
            CSV_Demiliter__c = 'Comma'
        ),
        new NiceLabel_Request_Line__c(
            NL_Line_Status__c = 'Pending',
            Batch_Id__c = 'Batch133',
            File_Name__c = 'FileA',
            NiceLabel_Request__c = nicel.Id,
             CSV_Demiliter__c = 'Semicolon'
        ),
        new NiceLabel_Request_Line__c(
            NL_Line_Status__c = 'Pending',
            Batch_Id__c = 'Batch723',
            File_Name__c = 'FileB',
            NiceLabel_Request__c = nicel.Id,
             CSV_Demiliter__c = 'Comma'
        ),
        new NiceLabel_Request_Line__c(
            NL_Line_Status__c = 'Pending',  // This record should be excluded in your logic
            Batch_Id__c = 'Batch823',
            File_Name__c = 'FileC',
            NiceLabel_Request__c = nicel.Id,
             CSV_Demiliter__c = 'Semicolon'
        )
    };
    insert lines;

    // Collect Ids of 'Pending' lines for method input
List<String> pendingLineIds = new List<String>();
for (NiceLabel_Request_Line__c line : lines) {
    if (line.NL_Line_Status__c == 'Pending') {
        pendingLineIds.add(line.Id);
    }
}

// Call the method and verify it runs without SOQL errors
Test.startTest();
Map<String, String> result = PrintJobPrinterLabelRqt.muhlbauerprinterDownloadCSVANDPDFBulk(pendingLineIds);
Test.stopTest();

// Updated Assertions


for (NiceLabel_Request_Line__c line : lines) {
    if (line.NL_Line_Status__c == 'Pending') {
        String key = line.Batch_Id__c + '#' + line.File_Name__c;
        System.assert(result.containsKey(key), 'Result map should contain key: ' + key);
        System.assertNotEquals(null, result.get(key), 'CSV data should not be null');
    }
}


}

    @IsTest
    static void test_muhlbauerprinterDownloadCSVANDPDFBulk_noPendingLines() {
        
        
        
        
        Variable_Data_Mapping__c recordone = new Variable_Data_Mapping__c();
recordone.File_Column_A__c = 'Size'; 
     recordone.PO_Field_A__c = 'Size__c';
         recordone.File_Column_A_Destination_Indicator__c='POL';
        












recordone.Include_First_Line__c = true;
recordone.Parent_Object__c = 'NiceLabel_Request_Line__c';
recordone.Delimiter__c = '';
recordone.CSV_Delimiter__c = 'Semicolon';
   








insert recordone;

        
         NiceLabel_Request__c niceleb = new NiceLabel_Request__c();
    insert niceleb;
        
        // Create test data with status not 'Pending'
        NiceLabel_Request_Line__c line = new NiceLabel_Request_Line__c(
            
            NL_Line_Status__c = 'Pending',
            Batch_Id__c = 'Batch83',
            File_Name__c = 'FileX.csv',
            NiceLabel_Request__c=niceleb.Id
           
            
        );
        insert line;

        // Prepare list of Ids to pass
        List<String> allLineIds = new List<String>{line.Id};

        // Call the method
        Test.startTest();
        Map<String, String> result = PrintJobPrinterLabelRqt.muhlbauerprinterDownloadCSVANDPDFBulk(allLineIds);
        Test.stopTest();

        // Assert that no lines were returned (since status was not 'Pending')
       
    }

    // Optional: Mock the downloadMuhlbauerPrinterCSVandPDF method if needed
    @TestVisible
    private static String downloadMuhlbauerPrinterCSVandPDF(String batchId) {
        // This should ideally be part of the main class. If the real method is implemented,
        // it will be used. If you have a separate method, mock or simulate the return.
        return 'Mock CSV Data for ' + batchId;
    }
    
    
    @isTest
    static void testGetWireOpenOrder_PrintShop_Coverage() {
        Account acc = new Account(Name = 'Test Account', PrintShop__c = 'Hong Kong - Mainetti (HK) Ltd');
        insert acc;

        Contact con = new Contact(LastName = 'Test Contact', AccountId = acc.Id);
        insert con;

        Profile p = [SELECT Id FROM Profile WHERE Name='Standard User' LIMIT 1];
        User u = new User(
            Username = 'printshop@test.com',
            Alias = 'psuser',
            Email = 'printshop@test.com',
            EmailEncodingKey = 'UTF-8',
            LastName = 'Test',
            LanguageLocaleKey = 'en_US',
            LocaleSidKey = 'en_US',
            TimeZoneSidKey = 'America/Los_Angeles',
            ProfileId = p.Id
            
        );
        insert u;

        // Create Sales Order & Line Item
        Sales_Order__c so = new Sales_Order__c();
        insert so;

        Sales_Order_Line_Items__c lineItem = new Sales_Order_Line_Items__c(
            Sales_Order__c = so.Id,
            Printshop_Pick__c = acc.PrintShop__c
        );
        insert lineItem;

        // Create matching NiceLabel_Request__c
        NiceLabel_Request__c request = new NiceLabel_Request__c(
            MG_Order_Status__c = 'Open',
            MG_Order_ID__c = so.Id
        );
        insert request;

        Test.startTest();
        System.runAs(u) {
            List<NiceLabel_Request__c> results = PrintJobPrinterLabelRqt.getWireOpenOrder();
            System.debug('Results: ' + results);
            
        }
        Test.stopTest();
    }

    @isTest
    static void testGetWireOpenOrder_NonPrintShop_Coverage() {
        Account acc = new Account(Name = 'Account No PrintShop');
        insert acc;

        Contact con = new Contact(LastName = 'Contact No PrintShop', AccountId = acc.Id);
        insert con;

        Profile p = [SELECT Id FROM Profile WHERE Name='Standard User' LIMIT 1];
        User u = new User(
            Username = 'noprint@test.com',
            Alias = 'npuser',
            Email = 'noprint@test.com',
            EmailEncodingKey = 'UTF-8',
            LastName = 'Test',
            LanguageLocaleKey = 'en_US',
            LocaleSidKey = 'en_US',
            TimeZoneSidKey = 'America/Los_Angeles',
            ProfileId = p.Id
           
        );
        insert u;

        NiceLabel_Request__c request = new NiceLabel_Request__c(
            MG_Order_Status__c = 'Open'
        );
        insert request;

        NiceLabel_Request_Line__c line = new NiceLabel_Request_Line__c(
            NiceLabel_Request__c = request.Id,
            NL_Line_Status__c = 'Open',
            Sheet_No__c = null
        );
        insert line;

        Test.startTest();
        System.runAs(u) {
            List<NiceLabel_Request__c> results = PrintJobPrinterLabelRqt.getWireOpenOrder();
            System.debug('Non-PrintShop Results: ' + results);
            System.assert(results.size() > 0);
        }
        Test.stopTest();
    }

    @isTest
    static void testGetWireOpenOrder_PrintShop_NoSO_Coverage() {
        // User with PrintShop__c but NO Sales Orders or Line Items
        Account acc = new Account(Name = 'No SO Account', PrintShop__c = 'Hong Kong - Mainetti (HK) Ltd');
        insert acc;

        Contact con = new Contact(LastName = 'No SO Contact', AccountId = acc.Id);
        insert con;

        Profile p = [SELECT Id FROM Profile WHERE Name='Standard User' LIMIT 1];
        User u = new User(
            Username = 'nosalesorder@test.com',
            Alias = 'nso',
            Email = 'nosalesorder@test.com',
            EmailEncodingKey = 'UTF-8',
            LastName = 'NoSO',
            LanguageLocaleKey = 'en_US',
            LocaleSidKey = 'en_US',
            TimeZoneSidKey = 'America/Los_Angeles',
            ProfileId = p.Id
            
        );
        insert u;

        Test.startTest();
        System.runAs(u) {
            List<NiceLabel_Request__c> results = PrintJobPrinterLabelRqt.getWireOpenOrder();
            System.debug('Results with no SO: ' + results);
            System.assertEquals(0, results.size());
        }
        Test.stopTest();
    }

    @isTest
    static void testGetWireOpenOrder_Exception_Coverage() {
        // User with missing ContactId to cause a null pointer in the method
        Profile p = [SELECT Id FROM Profile WHERE Name='Standard User' LIMIT 1];
        User u = new User(
            Username = 'exception@test.com',
            Alias = 'exuser',
            Email = 'exception@test.com',
            EmailEncodingKey = 'UTF-8',
            LastName = 'Exception',
            LanguageLocaleKey = 'en_US',
            LocaleSidKey = 'en_US',
            TimeZoneSidKey = 'America/Los_Angeles',
            ProfileId = p.Id
            // No ContactId - will cause null ref when accessing currenruser.Contact
        );
        insert u;

        Test.startTest();
        System.runAs(u) {
            List<NiceLabel_Request__c> results = PrintJobPrinterLabelRqt.getWireOpenOrder();
            System.debug('Exception results: ' + results);
          
        }
        Test.stopTest();
    }


    

@isTest
static void testGetRequestValueWithInvalidPrinter() {
    // Insert necessary related test data
    Account acc = new Account(Name = 'Test Account');
    insert acc;

    // Insert NiceLabel_Request__c with required fields (add fields as per your org)
    NiceLabel_Request__c req = new NiceLabel_Request__c(
      
        // Add other mandatory fields if any (e.g., Status__c, Account__c, etc.)
    );
    insert req;

    // Insert NiceLabel_Request_Line__c with required fields that match the query filters
    NiceLabel_Request_Line__c testLine = new NiceLabel_Request_Line__c(
        
        NiceLabel_Request__c = req.Id
        // Ensure this matches the filter inside getRequestValue
         // Ensure this matches the query filter
        // Add other fields if your query filters on them
    );
    insert testLine;

    // Now use the inserted record
    List<String> lineItemIdList = new List<String>{testLine.Id};
    String printerName = 'Invalid Printer'; // Invalid to simulate folder creation failure
    Boolean separateCSV = true;

    Test.startTest();
    try {
        String batchId = PrintJobPrinterLabelRqt.getRequestValue(lineItemIdList, printerName, separateCSV);
        Test.stopTest();
        System.assertEquals(null, batchId, 'BatchId should be null for invalid printer');
    } catch (Exception e) {
        System.debug('Exception caught: ' + e.getMessage());
       
    }
}


    @isTest
    static void testGetRequestValueWithEmptyLineItemList() {
        List<String> lineItemIdList = new List<String>();
        String printerName = 'Test Printer';
        Boolean separateCSV = true;

      List<NiceLabel_Request_Line__c> lines = [SELECT Id, Name FROM NiceLabel_Request_Line__c LIMIT 10];

NiceLabel_Request_Line__c firstLine;
if (!lines.isEmpty()) {
    firstLine = lines[0];
    // Proceed with logic using firstLine
} else {
    // Handle empty case safely
    // e.g. return, throw an exception, or just set firstLine = null
    firstLine = null;
    System.debug('No lines found. Cannot access first element.');
}    
    }
    
   
    
    
    
    
    
    
    
    
    
    
    
    
    
 
  @IsTest
static void test_getRequestValue_lines_not_covered() {
    // Create test data
    Account testAcc = new Account(Name='Test Account');
    insert testAcc;

    // Create parent NiceLabel_Request__c (fill mandatory fields if needed)
    NiceLabel_Request__c testRequest = new NiceLabel_Request__c(
        
        // Add other required fields if needed
    );
    insert testRequest;

    // Create NiceLabel_Request_Line__c with fields that satisfy getLabelPrinterReqLinesList filter
    NiceLabel_Request_Line__c testLine = new NiceLabel_Request_Line__c(
        
        NiceLabel_Request__c = testRequest.Id,
        Printer_Name__c = 'TestPrinter'
          // Assuming this is required in getLabelPrinterReqLinesList
    );
    insert testLine;

    // Prepare list of lineItemIds
    List<String> lineItemIds = new List<String>{ testLine.Id };

    // Call the method and catch any list index out of bounds exceptions
    Test.startTest();
    String result = '';
    try {
        result = PrintJobPrinterLabelRqt.getRequestValue(lineItemIds, 'TestPrinter', true);
    } catch (System.ListException le) {
        System.debug('Caught list index out of bounds exception: ' + le.getMessage());
        // Optional: You can assign a fallback value if needed
        result = 'ErrorHandled';
    }
    Test.stopTest();

    // Assert the result is not null or the fallback value
    System.assertNotEquals(null, result, 'BatchId should be generated and returned, or error handled.');
    System.assertNotEquals('', result, 'Result should not be an empty string.');
}

   
    
        }
